{
  "info": {
    "name": "IP Cross Backend - Referral API",
    "description": "Complete collection of referral system API endpoints for IP Cross Backend with comprehensive test coverage",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'http://localhost:3000');",
          "}",
          "",
          "// Set test customer headers if not already set",
          "if (!pm.environment.get('testCustomerId')) {",
          "    pm.environment.set('testCustomerId', '8781');",
          "}",
          "",
          "if (!pm.environment.get('testCustomerEmail')) {",
          "    pm.environment.set('testCustomerEmail', 'testuser@example.com');",
          "}",
          "",
          "// Log request details for debugging",
          "console.log('Request URL:', pm.request.url.toString());",
          "console.log('Request Method:', pm.request.method);",
          "console.log('Customer ID:', pm.environment.get('testCustomerId'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to ensure response time is reasonable",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "// Global test to ensure content type is JSON",
          "pm.test('Content-Type is application/json', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Log response for debugging",
          "console.log('Response Status:', pm.response.status);",
          "console.log('Response Body:', pm.response.text());"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "testCustomerId",
      "value": "8781",
      "type": "string"
    },
    {
      "key": "testCustomerEmail",
      "value": "testuser@example.com",
      "type": "string"
    },
    {
      "key": "referralCode",
      "value": "REF87814688626815",
      "type": "string"
    },
    {
      "key": "referralId",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Get Referral Form",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has success field', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});",
              "",
              "pm.test('Response contains offer data', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('offers');",
              "    pm.expect(jsonData.data).to.have.property('offer');",
              "});",
              "",
              "pm.test('Customer data is optional', function () {",
              "    const jsonData = pm.response.json();",
              "    // Customer data should be present if authenticated, null if not",
              "    pm.expect(jsonData.data).to.have.property('customer_name');",
              "    pm.expect(jsonData.data).to.have.property('customer_email');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "x-customer-id",
            "value": "{{testCustomerId}}",
            "type": "text",
            "description": "Optional: Include for authenticated customer data",
            "disabled": true
          },
          {
            "key": "x-customer-email",
            "value": "{{testCustomerEmail}}",
            "type": "text",
            "description": "Optional: Include for authenticated customer data",
            "disabled": true
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/referral/form",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "referral",
            "form"
          ]
        },
        "description": "Get referral form data including offer information. Authentication headers are optional - if provided, will include customer-specific data and existing referrals."
      },
      "response": []
    },
    {
      "name": "Create Referral",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has success field', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});",
              "",
              "pm.test('Response contains referral data', function () {",
              "    const jsonData = pm.response.json();",
              "    // Check for both possible response formats (id or referral_id)",
              "    const referralId = jsonData.data.referral_id || jsonData.data.id;",
              "    pm.expect(referralId).to.exist;",
              "    pm.expect(referralId).to.be.a('number');",
              "    pm.expect(referralId).to.be.greaterThan(0);",
              "    pm.expect(jsonData.data).to.have.property('refer_code');",
              "    pm.expect(jsonData.data).to.have.property('refer_link');",
              "    pm.expect(jsonData.data).to.have.property('status');",
              "    ",
              "    // Save referral code and ID for other requests",
              "    pm.environment.set('referralCode', jsonData.data.refer_code);",
              "    pm.environment.set('referralId', referralId);",
              "});",
              "",
              "pm.test('Referral data has valid format', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.refer_code).to.be.a('string');",
              "    pm.expect(jsonData.data.refer_code).to.have.length.greaterThan(0);",
              "    pm.expect(jsonData.data.refer_link).to.be.a('string');",
              "    pm.expect(jsonData.data.refer_link).to.include('http');",
              "    pm.expect(jsonData.data.status).to.be.a('number');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "x-customer-id",
            "value": "{{testCustomerId}}",
            "type": "text"
          },
          {
            "key": "x-customer-email",
            "value": "{{testCustomerEmail}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/referral/create",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "referral",
            "create"
          ]
        },
        "description": "Create a new referral or return existing one. Generates unique referral code and link for the customer."
      },
      "response": []
    },
    {
      "name": "Get My Referrals",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has success field', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('success');",
                "    pm.expect(jsonData.success).to.be.true;",
                "});",
                "",
                "pm.test('Response contains referrals and statistics', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData.data).to.have.property('referrals');",
                "    pm.expect(jsonData.data).to.have.property('statistics');",
                "    pm.expect(jsonData.data.referrals).to.be.an('array');",
                "    pm.expect(jsonData.data.statistics).to.have.property('totalEarnings');",
                "    pm.expect(jsonData.data.statistics).to.have.property('totalVisits');",
                "    pm.expect(jsonData.data.statistics).to.have.property('totalReferrals');",
                "    pm.expect(jsonData.data.statistics).to.have.property('totalOrders');",
                "});",
                "",
                "pm.test('Statistics have valid values', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData.data.statistics.totalEarnings).to.be.a('number');",
                "    pm.expect(jsonData.data.statistics.totalVisits).to.be.a('number');",
                "    pm.expect(jsonData.data.statistics.totalReferrals).to.be.a('number');",
                "    pm.expect(jsonData.data.statistics.totalOrders).to.be.a('number');",
                "    pm.expect(jsonData.data.statistics.totalReferrals).to.equal(jsonData.data.referrals.length);",
                "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "x-customer-id",
            "value": "{{testCustomerId}}",
            "type": "text"
          },
          {
            "key": "x-customer-email",
            "value": "{{testCustomerEmail}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/referral/my-referrals",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "referral",
            "my-referrals"
          ]
        },
        "description": "Get all referrals created by the authenticated customer along with earnings statistics."
      },
      "response": []
    },
    {
      "name": "Get Referred Buyers",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has success field', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});",
              "",
              "pm.test('Response contains referred buyers data', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.be.an('array');",
              "    // Note: Array might be empty if no referred buyers exist",
              "});",
              "",
              "pm.test('If buyers exist, they have valid structure', function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.data && jsonData.data.length > 0) {",
              "        jsonData.data.forEach(buyer => {",
              "            pm.expect(buyer).to.have.property('customer_id');",
              "            pm.expect(buyer).to.have.property('name');",
              "            pm.expect(buyer).to.have.property('email');",
              "            pm.expect(buyer.customer_id).to.be.a('number');",
              "            pm.expect(buyer.name).to.be.a('string');",
              "            pm.expect(buyer.email).to.be.a('string');",
              "            pm.expect(buyer.email).to.include('@');",
              "        });",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "x-customer-id",
            "value": "{{testCustomerId}}",
            "type": "text"
          },
          {
            "key": "x-customer-email",
            "value": "{{testCustomerEmail}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/referral/referred-buyers",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "referral",
            "referred-buyers"
          ]
        },
        "description": "Get customers who made purchases through this customer's referral links."
      },
      "response": []
    },
    {
      "name": "Update Referral Status",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has success field', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});",
              "",
              "pm.test('Response contains updated referral data', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.have.property('referral_id');",
              "    pm.expect(jsonData.data).to.have.property('status');",
              "    pm.expect(jsonData.data.referral_id).to.be.a('number');",
              "    pm.expect(jsonData.data.referral_id).to.be.greaterThan(0);",
              "    pm.expect(jsonData.data.status).to.be.a('number');",
              "});",
              "",
              "pm.test('Status update message is present', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.be.a('string');",
              "    pm.expect(jsonData.message).to.include('updated');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "x-customer-id",
            "value": "{{testCustomerId}}",
            "type": "text"
          },
          {
            "key": "x-customer-email",
            "value": "{{testCustomerEmail}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"status\": 0\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/api/referral/{{referralCode}}/status",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "referral",
            "{{referralCode}}",
            "status"
          ]
        },
        "description": "Update the status of a referral. Status values: 0 = Inactive, 1 = Active, 2 = Suspended. Can use referral ID or referral code."
      },
      "response": []
    },
    {
      "name": "Delete Referral",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has success field', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});",
              "",
              "pm.test('Response contains success message', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.include('deleted successfully');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "x-customer-id",
            "value": "{{testCustomerId}}",
            "type": "text"
          },
          {
            "key": "x-customer-email",
            "value": "{{testCustomerEmail}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/referral/{{referralCode}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "referral",
            "{{referralCode}}"
          ]
        },
        "description": "Delete a referral. Cannot delete referrals that have associated orders. Can use referral ID or referral code."
      },
      "response": []
    },
    {
      "name": "Validate Referral Code",
      "event": [
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has success field', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('success');",
                "    pm.expect(jsonData.success).to.be.true;",
                "});",
                "",
                "pm.test('Response contains referral validation data', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData.data).to.have.property('referral_id');",
                "    pm.expect(jsonData.data).to.have.property('refer_code');",
                "    pm.expect(jsonData.data).to.have.property('referrer');",
                "    pm.expect(jsonData.data.referrer).to.have.property('customer_id');",
                "    pm.expect(jsonData.data.referrer).to.have.property('name');",
                "    pm.expect(jsonData.data.referrer).to.have.property('email');",
                "});",
                "",
                "pm.test('Referral data has valid values', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData.data.referral_id).to.be.a('number');",
                "    pm.expect(jsonData.data.referral_id).to.be.greaterThan(0);",
                "    pm.expect(jsonData.data.refer_code).to.be.a('string');",
                "    pm.expect(jsonData.data.refer_code).to.have.length.greaterThan(0);",
                "    pm.expect(jsonData.data.referrer.customer_id).to.be.a('number');",
                "    pm.expect(jsonData.data.referrer.name).to.be.a('string');",
                "    pm.expect(jsonData.data.referrer.email).to.include('@');",
                "});"
              ]
            }
          }
        ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "x-customer-id",
            "value": "{{testCustomerId}}",
            "type": "text"
          },
          {
            "key": "x-customer-email",
            "value": "{{testCustomerEmail}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/referral/validate/{{referralCode}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "referral",
            "validate",
            "{{referralCode}}"
          ]
        },
        "description": "Validate a referral code for use in checkout process. Returns referral details and referrer information if valid. This endpoint is public and does not require authentication. Uses the referralCode environment variable which is set when creating a referral."
      },
      "response": []
    }
  ]
}