{
	"info": {
		"_postman_id": "reward-api-collection",
		"name": "Reward API Collection",
		"description": "Collection for testing Reward API endpoints with JWT authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    ",
									"    // Store the token for use in other requests",
									"    const token = jsonData.data.token;",
									"    pm.collectionVariables.set('jwt_token', token);",
									"    console.log('JWT token stored:', token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{customer_email}}\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Protected Endpoints - JWT Auth",
			"item": [
				{
					"name": "Get Customer Rewards - JWT Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has rewards data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('rewards');",
									"    pm.expect(jsonData.data).to.have.property('pagination');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/rewards?page=1&limit=10&sort=date_added&order=DESC",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rewards"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "sort",
									"value": "date_added"
								},
								{
									"key": "order",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Total Reward Points - JWT Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has total points data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('total_points');",
									"    pm.expect(jsonData.data).to.have.property('customer_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/rewards/total",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rewards",
								"total"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Reward Stats - JWT Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has stats data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('total_points');",
									"    pm.expect(jsonData.data).to.have.property('total_entries');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/rewards/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rewards",
								"stats"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Reward Points - JWT Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has reward data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.data).to.have.property('points');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"order_id\": 12345,\n    \"description\": \"Test reward points\",\n    \"points\": 100\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/rewards",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rewards"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rewards by Order - JWT Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has order rewards data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('order_id');",
									"    pm.expect(jsonData.data).to.have.property('rewards');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/rewards/order/12345",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rewards",
								"order",
								"12345"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication Error Tests",
			"item": [
				{
					"name": "Get Rewards - No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response indicates authentication required\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', false);",
									"    pm.expect(jsonData.message).to.include('authorized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/rewards",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rewards"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Reward Points - No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response indicates authentication required\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', false);",
									"    pm.expect(jsonData.message).to.include('authorized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Test reward\",\n    \"points\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/rewards",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rewards"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Total Points - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response indicates invalid token\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', false);",
									"    pm.expect(jsonData.message).to.include('authorized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_here"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/rewards/total",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rewards",
								"total"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "customer_email",
			"value": "test@example.com",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		}
	]
}